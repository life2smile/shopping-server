<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "HTTP://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--命名空间，sql隔离，对sql进行分类管理
注意：使用mapper代理方法开发，则有特殊作用-->

<mapper namespace="com.hanxiao.mapper.testmapper.UserMapper">

    <sql id="query_user_where">
        <if test="userCustom != null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and user.sex=#{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.sex!=''">
                and user.username like '%${userCustom.username}%'
            </if>
        </if>
    </sql>

    <sql id="query_user_by_ids">
        <if test="userCustom != null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and user.sex=#{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.sex!=''">
                and user.username like '%${userCustom.username}%'
            </if>
            <if test="ids != null">
                <!--<foreach collection="ids" item="id" open="and(" close=")" separator="or">-->
                    <!--id=#{id}-->
                <!--</foreach>-->
                <foreach collection="ids" item="id" open="and id in (" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </if>
    </sql>
    <!--用户信息的综合查询-->
    <select id="findUserList" parameterType="com.hanxiao.po.testpo.UserQueryVo" resultType="com.hanxiao.po.testpo.UserCustom">
        select * from user
        <where>
            <!--<include refid="query_user_where"/>-->
            <include refid="query_user_by_ids"/>
        </where>
    </select>

    <!---->
    <select id="findUserCount" parameterType="com.hanxiao.po.testpo.UserQueryVo" resultType="int">
        <!--select count(*) from user where user.sex=#{userCustom.sex} and user.username like '%${userCustom.username}%'-->
        select count(*) from user
        <where>
            <include refid="query_user_where"/>
            <!--<if test="userCustom != null">-->
                <!--<if test="userCustom.sex!=null and userCustom.sex!=''">-->
                    <!--and user.sex=#{userCustom.sex}-->
                <!--</if>-->
                <!--<if test="userCustom.username!=null and userCustom.sex!=''">-->
                    <!--and user.username like '%${userCustom.username}%'-->
                <!--</if>-->
            <!--</if>-->
        </where>
    </select>

    <!--映射文件中配置sql数据-->
    <!--通过select执行数据库查询，id标识
    映射文件中的sql，称为statement id，将sql
    语句封装到mappedStatement对象中
    parameterType指定参数类型和数据库一直
    #{id},表示输入的参数，参数名称是id，如果输入的参数是简单类型
    #{}中的参数名可以任意，可以使value或其他名称
    resultTYpe:指定sql输出结果输出的单条映射的java对象类型-->
    <select id="findUserById" parameterType="int" resultType="user">
        select * from user where id = #{id}
    </select>

    <!--定义resultMap,type:resultMap最终映射的对象,可以使用别名
    对resultMap的唯一标识-->
    <resultMap id="userResultMap" type="com.hanxiao.po.testpo.User">
        <!--id查询结果中的唯一标识
        colume：查询出来的列名
        property：type指定的pojo类型中的属性名-->
        <id column="id_" property="id"/>
        <result column="username_" property="username"/>
    </resultMap>
    <!--使用resultMapp做映射-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        select id id_, username username_ from user where id = #{id}
    </select>

    <!--<select id="findUserByName" parameterType="String" resultType="user">-->
    <!--&lt;!&ndash;{}里面的名字必须是value，第一种容易产生sql注入&ndash;&gt;-->
    <!--&lt;!&ndash;select * from user where username like '%${value}%'&ndash;&gt;-->
    <!--select * from user where username like #{name}-->
    <!--</select>-->

    <!--添加用户-->
    <insert id="insertUser" parameterType="user">
        <!--下面只适合主键递增-->
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select last_insert_id()
        </selectKey>
        <!--<selectKey keyProperty="id" order="BEFORE" resultType="string">-->
        <!--select uuid()-->
        <!--</selectKey>-->
        <!--insert into user(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address})-->
        insert into user(username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address})
    </insert>

    <delete id="delUserById" parameterType="int">
        delete from user where id = #{id}
    </delete>

    <!--<update id="updateUser" parameterType="user">-->
    <!--update user set username = #{username}, birthday=#{birthday},sex=#{sex}, address=#{address} where id = #{id}-->
    <!--</update>-->
</mapper>